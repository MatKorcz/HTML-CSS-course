/*

***CSS properties Shortcuts:***
margin              - m
padding             - p
border              - bd
fillgap border      - bd+
background-color    - bgc
background-image    - bgi
position            - pos


*----------------------------------------------*
* ###CASCADING RULES OF WEB BROWSWER:###       *
*----------------------------------------------*

1. First of all web browswer is initalizing values of properties by common initializing values for all browsers.
2. After that web browswer upload typed HTML file and convert it into DOM. There is checking every property value of each object and copying values scripted from our HTML to DOM. Every property undefined is getting default value from own specific value. 
3. Next there is uploading CSS files that describing properties on their own. And cascading Rules decides which property value are updating because are more prority.


CASCADE RULES:

1. Values of properties are initializate only if they are not declarate by user or web broswer.
2. Value initialize can be declarate by set this value, or inheritance from the parent.
3. Those values are inherited which have not precise rules. 
4. Precise rule can be set by web broswer, or by our CSS style.

OVERTWRITING RULES:
0. !important
1. Rules in CSS
2. Rules from web broswer
3. Inherited rules
4. Initialize values

*----------------------------------------------*
*           ###INHERITANCE:###                 *
*----------------------------------------------*

RULES:

1. Only a part of total properties are inherited.

2. Inherited is realising from the parent to the child ONLY if there is no rule descriped (e.g. in CSS file).



1. Values of properties initialized jointly in common web browswers.

2. Values of properties initialized by rules of each web browswer.

3. Values of properties which are inherinced from parents specified properties (that we speciefied in CSS e.g.). It means that for example if p is parent of span and we declared in CSS file property which is imherited. That means that child span will inherit it from parent p.

4. Precising selecting is more priority then imheriting. If more precising is selected object then is more priority his value of property.

Of precise there is deciding medals rule:
* 1 golden medal is is worth more than 999 other silver medals. Golden medal is selecting by ID
** 1 silver medal is worth more then 999 other bronze medals. Silver medal is selecting by determining kinship

*IMPORTANT*
Every combinator is on same stage.



*------------------------------------------------*
*              ###E G Z A M P L E:###            *
*------------------------------------------------*
*  <html>                                        *
*    <body>                                      *
*      <p class="ClassNameP">                    *
*      </p>                                      *
*    </body>                                     *
*  </html>                                       *
*------------------------------------------------*
- if we type html body p {color: blabla;}.

- it is "3 bronze medals" and is more priority then we type p{color: blabla;}.

- If we type .ClassNameP {color: blabla;} it is like silver medal and is more priority then any val. of bronze medals.

- if we type #ClassName {color: blabla;} it means it is gold medal and it is the most priority.
*IMPORTANT*
Pseudo-classes (that classes that web browswer creating e.g. :hover ) are counting like normal class.

*IMPORTANT*
There is cheat: if we type after property !important it wins anyway. E.g.: p{color: blue !important;}

*IMPORTANT*

*{color: red;} - * is not giving any medal. If there is anything which brings medal - it is updating obj. property val.

*------------------------------------------------*
*              ###E G Z A M P L E:###            *
*------------------------------------------------*
*  <div class="blue">                            *
*    <p class="red"> Tekst </p>                  *
*  </div>                                        *                              
*------------------------------------------------*

div.blue p{color:blue}
p.red {color: red;}
body div p {color: green}
div>p {color: yellow}

so priority is blue>red>green>yellow.




*----------------------------------------------*
*      ###SELECTORS AND COMBINATORS:###        *
*----------------------------------------------*


***In CSS we use the so-called Rules:*** 
      _________________________
e.g. | h1 { property: value; } |
      -------------------------
Rules allows us changing properties of the object.
To select choosed object we use "Selectors", for choosing specific obj. we use "Combinators".



***SELECTORS:***

If you selecting "normal" selector like h1, p, span etc. You have to type simply
name of this selector like for e.g. h1 {}

If you are going to choose class selector, before name you have to type "." e.g.: .ClassName {}



***COMBINATORS:***

Avaible combinators (with e.g. selectors) are shown below:

p  h1 {} - means h1 descendant of p (in contrast to p>h1, h1 don't have to be directly 
           descendant of p. The h1 can be e.g. inside of span which is inside of this p and this "h1" is
           selected too)

p + p {} - means that we choosing the second "p" (this one after +) which is his "younger brother"
           so if you type p + p + p {} - that means that you select last 2x p.

p ~ p {} - means that we are choosing second p, and every next p (like p+p+p+p...).

p>h1     - means that we are selecting a DIRECT descendant of p (so h1)
           so if you type p>h1>span {} - that means you select span of h1 of p.

*{}      - means every selector.

p,h1  {} - means that we are selecting 2 selectors at same time.



***Assembling CSS:***
You can quickly put it on <head> in HTML file using there index <style> </style> just for quickly
testing our solution. But finally we have use external file .css and link it in HTML by <link>


______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*             ###CSS SIZES:###                 *
*----------------------------------------------*


Below shown common sizes used as values in CSS:

px    - pixels
%     - percent of enherited property size
em    - ratio from the parent e.g. 2em (means 2x px of parent property size value)
rem   - ratio from main selector (<HTML>)
vw    - viewport width - width [%] of viewport e.g. 100vw means 100% viewport width
vh    - viewport height - height [%] of viewport e.g. 50vw means 50% viewport height

*IMPORTANT*
[%] including scroll bar if page is longer then 1 page.
[vw] does NOT include scroll bar, so if page is longer then 1, and scroll bar will be created - 100 vw WILL NOT fit as width.
Conclusion is: to width use %, to height use vh.

*COLORS VALUES*

#010101                 - hexadecimal type.
#ddd                    - short version of hexa.
rgba (155, 255, 100, 1) - red, green, blue ratios and last means tranparent.
rgb (155, 255, 1)       - same with default transparent val.
yellow:                 - you can type specific name of color.

______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*             ###CSS PROPERTIES:###            *
*----------------------------------------------*


*OTHERS*

color: red;
width: 10px                             - width of obj.
height: 20px                            - height of obj.
letter-spacing: 2px;                    - size of space between letters.
word-spacing: 2px;                      - size of space between words.
background-color: #010101;              - color of background
background-size: cover;                 - fit image in allow space
background-image: ('image.jpg');        - image as background
list-style-type: none;                  - delete dots from list

*IMPORTANT*
If you want to set title on background-image (background-image into parent property, title as font property of child obj.) and it is not clearly visible:
- set child background-color: RGBA (0,0,0,0.5) which darken background and the white title will be better visible.



*FONTS*
font-size: 10px;
line-height: 12px;                      - means if font-size is 10px, line-height 12px, so
                                          the space between total height line and letters will be 1px up of letter and 1px under.
font-family: arial, tahoma, sans-serif; - which means that if there is no arial it will use tahoma font style
                                          if it is not avaible too, it choose any sans serif font style.
font-weight: bold;                      - from 100-700, or normal/bold.
font-style: italic;                     - italic.
Hyphens: auto;                          - dzielenie slow żeby się miescilo
Text-elign-last: center;                - ostatnie slowo na srodku np
Word-wrap: break-word;                  - dzielenie slowa jak wychodzi poza ramke


*TEXT*
text-indent: 2px;              - indent of text.
text-align: justify;           - justify/center/left/right;
text-transform: uppercase;     - uppercase/lowercase/capitalize;
vertical-align: top;           - top/down/baseline/0-100; fitting to calculated line words which are not same height.
text-decoration: underline;    - underline/line-thourgh/none/overline;

*OVERFLOWING*
overflow: hidden;              - Hide anything which is overflowing tekst space in over it.
min-width: 200px;              - Minimum width value of text space as inicializing value.
min-height: 200px;             - Minimum height value of text space as inicializing value.
max-width: 300px;              - Maximum width of text space after it, it will overflowing.
max-height: 300px;             - Minimum height value of text space as inicializing value.

*HOVER*
if we use e.g. .classname:hover { instruction } "hover" is special skill that will do instruction
after hovering over that object

a:hover {
transition .2s;                - slow effect of making all properties inside of hover quasiclass 

}

*----------------------------------------------*
*         ###MARGIN/PADDING/BORDER:###         *
*----------------------------------------------*

margin                         - outside margin
padding                        - inside margin
border                         - frame between padding and margin


**************
*** MARGIN ***
**************

margin: 10px 20px 30px 40px;   - like in clock: up margin size, right, down, left.
                                 if you type only margin 10px 20px means up&down, left&right.
margin-top: 10px;              - selected side of margin size.

*IMPORTANT* Margins doesn't sum. If we have obj with margin 20px, and under it another obj with 10px it doesnt mean that margin between them is 10+20px. IT IS JUST 20px!


***************
*** PADDING ***
***************

padding same like margin;


**************
*** BORDER ***
**************

border: 3px solid #ddd;        - border have 3 properties: size, style, color. You can select one of those
border-left-width: 3px;
border-width:3px;
border-top-style: solid;
border-style: solid;
border-top-color: #ddd;
border-color: #ddd;






______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*         ###BLOCK ELEMENTS IN CSS:###         *
*----------------------------------------------*


- Most elements in CSS are block type. 
- Block elements have default property display: block. This property affect how element behaves. It including another         default property values: width 100% from his parent, and height auto:

                block element {

                display: block;
                width: 100%;
                height: auto;

                }
- New block element = new line.
- Block element can nest another block elements, and is able to have line elements.
- We have full control of "box" properties: which means we can change width, height, margin, padding, border.


Most common block elements in css that You can meet:

<article>
<aside>
<div>
<form>
<h1-h6>
<header>
<li>
<ol>
<ul>
<nav>
<main>
<p>
<pre>
<section>
<table>
etc..



*----------------------------------------------*
*         ###LINE ELEMENTS IN CSS:###          *
*----------------------------------------------*


- Only few elements in css.
- Height and width doesn't depend on parents. Properties have values auto:

              linear element {
                display: inline;
                width: auto;
                height: auto;
                }

- YOU CAN'T change width and height. Any update doesn't change their value.
- Also margin top and bottom is not changing.
- New linear element !new line.
- To be able to make changes of it, we have to change display: from inline to block, or inline-block;

Line elements in css:
<a>
<b>
<em>
<i>
<img> - EXCEPTION!
<span>
<strong>

*IMPORTANT*
<img> is not exacly linear block. It is only until src: is not ref to picture which fill <img>. After that You can change width and height.


______________________________________________________________________________________________
*/
/*

*----------------------------------------------*
*                ### DISPLAY: ###              *
*----------------------------------------------*




***********************
*** DISPLAY: BLOCK  ***
***********************

- Read: ###BLOCK ELEMENTS IN CSS:###  



***********************
*** DISPLAY: INLINE ***
***********************

- Read: ###LINE ELEMENTS IN CSS:###



*****************************
*** DISPLAY: INLINE-BLOCK ***
*****************************

- It behavies the most like block (box-properties control, width 100% from his parent, and height auto)
- Additionally in contrast to block it is creating like inline element behavies (at same line).
______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*              ### TIPS IN CSS: ###            *
*----------------------------------------------*





*********************************
*** RESET AT BEGIN OF PROJECT ***
*********************************

To begin with project good habit is to reset in whole html file margin and padding:
*{
margin: 0;
padding: 0;
box-sizing: border-box;
}

*************************************************
*** Page extension to 1280px and width center ***
*************************************************

In HTML wrap whole body with additional div.Wrapper class and in CSS file type rule:

div.wrapper {
max-width: 1280px;
margin: 0 auto;
}


**********************************
*** Popular screen resolutions ***
**********************************

- 1280
- 1440
- 1600
- 1920


*******************
*** CALCULATION ***
*******************

Used in calculation:

E.G.:

width: calc(100% - 300px);


****************************************
***             BUTTONS:             ***
****************************************


To manipulate size of linear elements, we have to change display of this obj from inline to inline-box.

*IMPORTANT*
If we want count width as whole (content+padding+border) it is needed to change box sizing from content to border


E.G.:

nav a{
box-sizing: border-box;
display: inline-block;
width:25%;
padding: 10px 25px;
margin: 10px 15px;
border: 2px solid brown;
font-size: 20px;
text-decoration: none;
font family: arial, sans-serif;
text-transform: uppercase;
color: brown;
text-align: center;
line-height: 40px;
background-color: blue;
}

*IMPORTANT*
There is a bug. Linear elements have "bugged marine". There is few methods how to solve problem.
1. First is just to change font-size of parent to 0:

nav{
font-size: 0;
}



************************
*** CENTERING BUTTON ***
************************


text-align: center;
padding: 10px 25px;
line height: 30px;

*IMPORTANT*
if we use hover, and border-bottom into property of it as underlining when hovering over a button there is possible crash situation cuz of visibling weight line which is caused of height auto which automatically change size of it. To solver problem it is needed to pick static value of line height.


Changle buttons position which are located next each other is best to realize from their parent so with common object like navi, menu, section etc. Makes it possible:
- Set padding: 10px; to increase more space up and down to content.

*IMPORTANT* 
If you use margin (not padding) the background will not inherit so will be default.



*************
*** ENCJE ***
*************


Special signs. To pick it up start with type "&" and choice sign from hint.



______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*                 ### FLOAT ###                *
*----------------------------------------------*


Float is used for:
- Create page layout
- Create menu
- Positioning images in obj with text.

E.G.:

dla html div>img+p:

img {
float: left;
width:25%;
}
p {float: left;
width:75%}


*IMPORTANT*
Parent doesn't see childs height (from him it is 0px)


4 Solutions to solve bug problem with Float:
1. Overflow: hidden or auto on parent
2. Static height value on parent
3. Additional obj in HTML which have property clear: both;
4. clear:both; without additional obj but needed use quasielement after. Remmeber use it on parent (cuz there is a height bug problem).



*************
*** Ad. 3 ***
*************


E.G.:

html:
<ul>
  <li>Pozycja 1</li>
  <li>Pozycja 2</li>
  <li>Pozycja 3</li>
<li class="clear"></li>
</ul>

css:
.clear{clear:both;}



*************
*** Ad. 4 ***
*************


E.G.:

html:
<ul class="clearfix">
  <li>Pozycja 1</li>
  <li>Pozycja 2</li>
  <li>Ppzycja 3</li>
</ul>

css:
       .clearfix::after {
            content: "";
            display: block;
            clear: both;
        }



*----------------------------------------------*
*            ### PSEUDOELEMENTS ###            *
*----------------------------------------------*


::first-line
::first-letter
::selection
::before
::after


Pseudoelements ::before ::after
Elements that browswer creating automatically if you include it in css file.
::before is creating as first, ::after as last.


E.G.:

div::before{content: "";}
div::after{content: "";}

in html file it looks like:
<div>
::before
</div>
::after



*----------------------------------------------*
*              ### PSEUDOCLASS ###             *
*----------------------------------------------*



Pseudoclass :hover :focus :first-child
Class that broswer creating automatically if you include it in css file.

:hover           - event if the element is hovered
:focus           - event active element if status is activated
:first-child     - place in structure
:visited         - if link was clicked before
:nth-child(n)    - select n child
:nth-of-type(n)  - select n of type child

nth-child(n) Examples:

nth-child(4)     - selected 4th child of obj.
nth-child(2n)    - selected every 2,4,6...2n child
nth-child(3n-2)  - selected every 1,4,7...3n-2 child
nth-child(even)  - parzysty child
nth-child(odd)   - nieparzysty child

*IMPORTANT*

if:
<nav>
  <div> </div>
  <a> </a>
  <a> </a>
</nav>

a:nth-child(1) {}      - it will not select anything cuz first child is div!

Here you have to type:
a:nth-of-type(1) {}    - and it will select first a of that


______________________________________________________________________________________________
*/


/*




*----------------------------------------------*
*              ### POSITIONING ###             *
*----------------------------------------------*

We can positioning inline elements into blocks as div in methods:
- using display: inline-blocks into inline elements to change properties of display them into block elements.
  Remember to fix "margin bug" - change font-size: 0px on parent (div) 
- using float: left as example. Float changes display propertie to block.
  Remember to fix bug that div doesn't see these elements so if you don't specyfie height it will be 0.
  You have to use clearfix method:

    .clearfix::after {
      content: "";
      display: block;
      clear: both;
    }

and type class in every including inline element, or on their parent:

Ex.:

<body>
  <div class="board clearfix">
    <span></span>
    <span></span>
    <span></span>
    <span></span>
  </div>

- using Position: absolute (read below).



Default Position: static;

Positions avaible in CSS:
- static
- fixed
- absolute
- relative



***********************
*** Position: FIXED ***
***********************


Position fixed: 
- breaks out of the page structure
- Is not related with any objects. Can hide each other and it depends on z-index property.
- avaible whole obj. control (padding, margin, border, height, width etc.)
- default it is block element
- is taped to the browswer (e.g. is moving when you scrolling to be on same positon as we typed)


Moving objects depending on which side we use:

E.G.: if we type:
position: fixed;
left: 30px;               - means that object move from left side 30px to right
top: 20px;                - means that object move from top 30 px down

But if we type:
position: fixed;
right: 30px               - that means the object will move from right side 30 px to left

*IMPORTANT*
If you type both sides e.g. left:0 right:0 the object width will be from left 0 to right 0 so whole 100% width
So if you also type width and heght property, and both sides (e.g. left, right, top, bottom) - width and height will overwrite that values.


****************************
*** Position properties: ***
****************************


position: static/fixed/absolute/relative;
left:
right:
top:
bottom:
z-index: 1;               - To decide which layer of object is visible, and which will hide another. bigger number > lower.



**************************
*** Position: ABSOLUTE ***
**************************

- is not taped to the browser (when we scrolling page, the obj. is not moving with scroll.)
- position can be not related with browswer (default it is, but we can change it). If any parent of his parent got positon: relative, it will default related with browswer and to it it will be positioned.
- avaible whole obj. control (padding, margin, border, height, width etc.)
- default it is block element
- need position: relative on parent - to position with when needed to be positioned. (default is with broswer)



**************************
*** Position: RELATIVE **
**************************

- the element is still in the same place from the point of view of structure, but in the view layer it is possible to move it so that it will look somewhere else. However, "physically", ie in the structure layer, other objects will still see it where it was
______________________________________________________________________________________________
*/
/*


*----------------------------------------------*
*         ### BACKGROUND PROPERTIES:###        *
*----------------------------------------------*



************************
*** BACKGROUND COLOR ***
************************

Characteristic:
- default: background-color: transparent
- changing background color make changes in content, padding and bording.


************************
*** BACKGROUND-IMAGE ***
************************

Characteristics:
- when obj have static height and wight sizes, the picture that we import into that obj is pasting from top left corner to the bottom right in defines in picture sizes from the padding. Inside border there is kind of copy image but in different way.
- if picture sizes it less then the obj. image is copying in that way to fill whole size of the obj.
- if we want to not replicate pictures it is neeeded to change property: background-repeat: no-repeat;
- there is avaible to pick many pictures inside of the obj:

E.G.:
background-image: url ("picuture1.jpg"), url ("picuture2.jpg");



***************************
*** BACKGROUND-POSITION ***
***************************

Characteristic:
- very specific positioning control. If we type:
  * Background-position: 20%;                 - it means that 20% will be from left 30% of size obj to right width, 
and because we didn't define second argument (height) it will be default: center.
  * Bacground-position: 50% 50%;              - means that it will be defined as center. (counting not from left but from 
          center of picture)
  * Background-position: 50% 20% 40% 60%;     - clock method: 50% top, 20% right 40% bottom 60% left
  * Background-position: left;                - to left side
  * Background-position: bottom 30% right 50% - means 30% from bottom up and right center (50% always means center).




***********************
*** BACKGROUND-SIZE ***
***********************


Characteristics:
- Specific size control. If we type:
  * background-size: 100% 100% - it will fill width and height of obj in 100% (size of picture is modify to size obj)
  * background-size: 50% auto  - in width it will be 50% of size obj, and height will be in proportion of picture
  * background-size: cover     - fill all obj size but in good proportion of picture and starting from top-left pic.                                      Browswer trying to cut as less of pic as   it is possible
  * background-size: contain   - the whole picture is in obj without cut




*****************************
*** BACKGROUND-ATTACHMENT ***
*****************************

- Default: scroll;
- background-attachment: fixed; - means that it will be typed to browser and when we scroll, the picture is moving
Characteristic:

______________________________________________________________________________________________
*/
/*


*----------------------------------------------*
*                ### MOBILE:###                *
*----------------------------------------------*



In desktop 1px = 1px
In mobile there is another mode: mobile. It change real px to nominal px (CSS resolution) cause it is not comfortable fill too high resolution in such litle device like smartphone. so There is convert e.g. 1080 x 1920 to 360 x 640px


To allow mobile broswer display nominal pixels it is needed to add:

******************************************************************************
*   <meta name="viewport" content="width=device-width, initial-scale=1.0">   *
******************************************************************************


Which means:
content="width=device-width   - means width browswer page = width of device
initial-scale=1.0             - means according to DRP 100% zoom



______________________________________________________________________________________________
*/

/*


*----------------------------------------------*
*              ### VARIABLES:###               *
*----------------------------------------------*

E.G.:

html{
--blue: rhb(12,31,232);
}

background-color: var(--blue);
______________________________________________________________________________________________
*/
/*


*----------------------------------------------*
*            ### EMMETS SHORTCUTS:###          *
*----------------------------------------------*


*************
*** !+TAB ***
*************

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Document</title>
</head>
<body>
  
</body>
</html>


**********************
*** OBJ_NAME + TAB ***
**********************

<p> </p>



***********************************
*** FONT DECLARATION PROPERTIES ***
***********************************


font: font-style font-weight font-variant font-size/line-height font-family

E.G.:
font: italic bold small-caps 20px/140% tahoma

*IMPORTANT*
to use shortcute MINIMUM you have to declare is font-size and font-family, 

E.G.:
font: 20px arial;


********************************
*** GENERATE 4 same elements ***
********************************


E.G.:
a[#].Botton$*4 +TAB

Makes:
<a href="#" class="Botton1"></a>
<a href="#" class="Botton2"></a>
<a href="#" class="Botton3"></a>
<a href="#" class="Botton4"></a>


***************************
*** GENERATE 4 elements ***
***************************


E.G.:
nav+header+main+footer +TAB

Makes:
<nav></nav>
<header></header>
<main></main>
<footer></footer>



*************
*** LOREM ***
*************


E.G.:
LOTEM1000 + TAB

Makes:
1000 words



*****************************
*** GENERATE OBJ INTO OBJ ***
*****************************


E.G.:
body>nav>div

Makes:
<body>
  <nav>
    <div></div>
  </nav>
</body>


******************************************************************************
*** <meta name="viewport" content="width=device-width, initial-scale=1.0"> ***
******************************************************************************

E.G.:
meta-vp + tab

Makes:
<meta name="viewport" content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">


orientation: portriat, landscape;
@media () and(){}
______________________________________________________________________________________________
*/

/*


*----------------------------------------------*
*              ### ANIMATIONS ###              *
*----------------------------------------------*



******************
*** TRANSITION ***
******************

- Usually used with JS, JQ when You hover to picked element.
- Transition is used into main element. E.g. if we want make animation when element is hovered - transition is typed into     THIS element, not into thisElement:hover:

button {
color: black;
transition: 1s}

button:hover{color white}

- Transition is shortcut of few transitions properties. Default Transition property is:
  Transition: all 0s ease;

*** Transition-property *** 
What property is going to be changed. 
E.g:
transition-property: font-size;

*** Transtiion-duration ***
Declaring time of duration property.
E.g.
Transition-duration: 1s;

*** Transition-timing-function ***
Timing function of duration
E.g.
transition-timing-function: ease - initial slowly animation, get accelerate, and slow down in the end.
Other options:
- ease
- linear - constant speed
- ease-in - start slowly, speed up
- ease-out - start quick, slow down
- cubic-bezier(a,b,c,d)

*** Transition-delay ***
Delay transition
E.g.
Transition-delay: 1s;

*** STEP TRANSITIONS OPTION ***
transition: 60s steps (60); - used e.g. in clock to simulate hand of clock moving around the clock.


To transition property works, we need declare:
1. Initial property
2. Changed property
3. Transition
4. Initial transition action (e.g. hover)



*****************
*** TRANSFORM ***
*****************


Many different properties of transform have to be declared once in transform declaration:

E.G.:

transform: rotateX(145 deg) scale (1.5);


Transform properties:
- transform: rotate (0deg);
- transform-origin: 50% 50%; - point of element in which the whole element is transforming
- transform: translate (-50%, -50%); - moving element 50% (of THIS element, not parent!) to the left, and 50% top.




*****************
*** ANIMATION ***
*****************
Animation avaible making simple animation in css. To create animation it is required to use keyword "@keyanimation:" as declaration animation. after that we declare name of animation and presents key frames. It is needed to declare first and last keyframe (0% and 100%) as minimum. in brackets of keyframes you can choose property which will be modify in animation step:


Minimum required declarating informations:

@keyframes nameAnimation {
0% {property: ;}
100% {property: ;}
}

div { animation: nameAnimation durationTime;}



E.G.:

@keyframes move {
0% {left: 0px;}
50% {left: 500px;}
100% {left: 200px;}
}

div {animation: move 10s;}

___

Animation properties:
- animation-name (defaut: none) - name of animation
  e.g. animation-name: move;
- animation-duration (default: 0) - duration of animation
  e.g. animation-duration: 1s;
- animation-delay (default: 0) - delay of animation
  e.g. animation-delay: 1s;
- animation-direction (default: normal):

      * normal:
    first time  this animation: 0% -> 100%
    second time this animation: 0% -> 100%

      * alternate:
    first time  this animation: 0% -> 100%
    second time this animation: 0% <- 100%

      * reverse:
    first time  this animation: 0% <- 100%
    second time this animation: 0% <- 100%

      * alternate-reverse:
    first time  this animation: 0% <- 100%
    second time this animation: 0% -> 100%

e.g. animation-direction: alternate;


- animation-iteration-count (default: normal - so once) - iteration of animation value
  e.g. animation-iteration-count: 100;
  e.g. animation-iteration-count: infinite;
- animation-fill-mode (default: none) - 

    * none:
    if this property have default value animation properties affecting for the object     only when the animation is in use. before and after animation the values are same as they were declared in css.

    * both:
    animation-fill-mode: both - means that properties declared in ANIMATION affecting for the object properties whole time even if the animation is before start and after finish.
    *IMPORTANT* 
    usually it is not optimal to use it if animation is in infinite iteration count, or without delay.

    * forwards:
    before animation properties are setted as they are, after start animation - animation properties affecting on them, and in after the end of animation affected properties stays as they were setted at end frame (100%).

    * backwards:
    before animation it is like in 0%, after 100% it is like in properties are setted normally (like e.g. we declared them in css)

  e.g. animation-fill-mode: both;

- animation-timing-function (default: ease;) - timing function of animation:

    * linear
    * (steps)
        *IMPORTANT*
        (steps, end) - it doesn't take 0% and include 100%;
        (steps, start) - it doesn't take 100% and include 0%;
    * cubic-beziere
    * ease


- animation-play-state (default: runing)
    * paused

______________________________________________________________________________________________
*/
/*



*----------------------------------------------*
*                ### FLEXBOX ###               *
*----------------------------------------------*



Flexbox is elastic box model which guarantee elements scalling. Objects are fitting inside place where they are putted in. Limit is that contener where they are putted.

To use flexbox properties we have to put on parent display:flex; :

E.G.

section {display:flex;}

<section>
<div>1</div>
<div>2
  <div>X</div>                   <- this div is not flexed. We have to declre display flex on div2.
</div>
<div>3</div>


*** Default flexbox settings ***

- Elastic elements position themselves next to each other:
 * flex-direction: row           - horizontally
 * justify-content: flex-start   - from left to right
- flex-basis: auto               - in weight fitting as much space, as they need to
- align:items: stretch           - in height they take 100% height parent
- flex-wrap: nowrap              - Every object try to fit in one line
- flex:shrink: 1                 - if elements are bigger then contener, they are decreasing proportionally.



***********************************
*** FLEX PROPERTIES FOR PARENTS ***
***********************************


*** Flex properties which we declare in parents ***
- display
- flex-direction
- flex-wrap
- align-items
- justify-content
- align-content



Display: flex;                   - contener have on main axis 100% parent width
         inline-flex;            - have on main axis that width as childs needs.

*** Axises menagment ***
- Main axis we can menage by flex firection
- added axis parallel to main axis menaged by justify-content
- perpendicular axis to main menaged by align-items

flex-direction: row;             - elements from left to right
                row-reverse;     - from right to left
                column;          - from up to down
                column reverse   - from down to up


justify-content: flex-start;     - childs taking place from left to right so if there is free space in contener it will be on the right side of contener
                 flex-end;       - free space on left side
                 flex-center;    - elements fitting in center, so any free space will be proportionally on left and right side.
                 flex-around;    - between each elements and on left and right side there is proportionally free space
                 space-between   - first element is on left side, last one is on right, and all rest elements are inside, and between each other there is free space


align-items:     stretch;        - stretching
                 flext-start;    - from begin to end
                 flex-end;       - from end to first
                 flex-center;    - centered


flex-wrap:       nowrap          - if elements are bigger then parent e.g. in width, flex don't allow go them to another line
                 wrap            - avaible go to another line of contener

flex-shrink      1               - allow to reduce elements dimensions if are bigger then contener
                 0               - no consent for fit

flex-flow:       row wrap;       - this is shorcut for declare in 1 line direction and wrap property of flex





**********************************
*** FLEX PROPERTIES FOR CHILDS ***
**********************************


*** Flex properties which we declare in childs ***
- flex-grow
- flex-shrink
- flex-basis
- align-self
- order


Order:           1               - higher order number = lower in hierarchy

flex-grow:       0               - 0 means that space is not able to division. if we type more then 0 it will mean proporcion of his free space to                                            division.

flex-basis:      100px           - basis size of element. Depends on flex-direction setting.
                                   * if flex-direction is row - it is setting element width
                                   * if flex-direction is columnt - it is setting element height

flex-shrink:     1               - allow to reduce elements dimensions if are bigger then contener
                 0               - no consent for fit

flex:            0 1 auto        - shortcut to define 3 properties in 1 line: flex-grow, shrink and basis. Default is: 0 grow 1 shrink auto basis

align-self       auto            - elign-self is like align-items but only for 1 element.
                 baseline        -
                 stretch         - stretching
                 center          - centering
                 flext-start;    - from begin to end
                 flex-end;       - from end to first
                 flex-center;    - centered





______________________________________________________________________________________________
*/
/*


******************
*** JAVASCRIPT ***
******************



*** Adding to page JS ***
2 methods:
- <script></script>
- As last in body: <script src="script.js"></script>

*** Datatypes ***
3 Simple types:
- string:     var name = "Janek"
- number:     var age = 102
- boolean:    var female = true

*** Variable declaration ***
- var         var productID = 51112;
- let         let userName = "Marysia"
- const       shotCat = "Multi"

*** Value assignment ***
- var, let you can overwrite new value.
- You can't overwrite const value.

let - is new var type without old problems with var type in JS.


*** Operators ***
=
+ 
++
-


*** DOM ***
Document ObjectModel - represent document of page html in browswer. 
It is collection of objects (nodes) created by markers (div, span etc) atributs and page content. 
DOM creates nodes and creating tree structure of it with whole relations between them. It enables to appeal to objects and makes modifications. E.G. by adding new class in JS when we click a button. But that changes are not creating in HTML code, but in DOM.


*** Download element ***
- Find and download first fit to search element:
var redltem = document.querySelector('div.red');
- Find and download every fit elements in file:
var blueltems = document.querySelectorAll('.blue');
- Find and download searched by ID:
var greenElement = document.getElementById('green');


*** Listening ***
AddEventListener:
need 2 atributes:
- for what it is waiting
- what to do if the event will come
E.G.:
const btn = document.quesrySelector('button');
btn.addEventListener('click', function(){console.log("klikniecie")});
which means if we click button, we type in console "klikniecie"


You can declare funtion in any place of code:
nameFunction(){instruction};

and call function later
btn.addEventListener('click' nameFunction());

______________________________________________________________________________________________
*/